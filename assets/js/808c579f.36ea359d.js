"use strict";(self.webpackChunkidentity_docs=self.webpackChunkidentity_docs||[]).push([[3427],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=u(n),d=i,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||a;return n?r.createElement(m,o(o({ref:t},l),{},{components:n})):r.createElement(m,o({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6451:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),o=["components"],c={sidebar_position:1,title:"IntelliJ File Templates"},s="IntelliJ File Templates",u={unversionedId:"cruiser/reference-material/intellij_file_templates",id:"cruiser/reference-material/intellij_file_templates",title:"IntelliJ File Templates",description:"These are helpful file templates use in Intellij IDEs (specifically I use CLion). These can be added in Settings -> Editor -> File and Code Templates and then used when creating new files.",source:"@site/docs/cruiser/reference-material/intellij_file_templates.md",sourceDirName:"cruiser/reference-material",slug:"/cruiser/reference-material/intellij_file_templates",permalink:"/docs/cruiser/reference-material/intellij_file_templates",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cruiser/reference-material/intellij_file_templates.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"IntelliJ File Templates"},sidebar:"tutorialSidebar",previous:{title:"Custom Account Infos",permalink:"/docs/cruiser/advanced-topics/Custom Account Infos"},next:{title:"Sample Escrow Program",permalink:"/docs/cruiser/escrow-example/Escrow Example"}},l={},p=[{value:"Instruction",id:"instruction",level:2}],f={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intellij-file-templates"},"IntelliJ File Templates"),(0,a.kt)("p",null,"These are helpful file templates use in Intellij IDEs (specifically I use CLion). These can be added in ",(0,a.kt)("inlineCode",{parentName:"p"},"Settings -> Editor -> File and Code Templates")," and then used when creating new files."),(0,a.kt)("h2",{id:"instruction"},"Instruction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use cruiser::prelude::*;\n\n#[derive(Debug)]\npub enum ${INSTRUCTION_NAME} {}\nimpl<AI> Instruction<AI> for ${INSTRUCTION_NAME} {\n    type Accounts = ${INSTRUCTION_NAME}Accounts<AI>;\n    type Data = ${INSTRUCTION_NAME}Data;\n    type ReturnType = ();\n}\n\n/// Accounts for [`${INSTRUCTION_NAME}`]\n#[derive(AccountArgument, Debug)]\n#[account_argument(account_info = AI, generics = [where AI: AccountInfo])]\npub struct ${INSTRUCTION_NAME}Accounts<AI> {}\n/// Data for [`${INSTRUCTION_NAME}`]\n#[derive(Clone, Debug, BorshSerialize, BorshDeserialize)]\npub struct ${INSTRUCTION_NAME}Data {}\n\n#[cfg(feature = "processor")]\nmod processor{\n    use super::*;\n\n    impl<AI> InstructionProcessor<AI, ${INSTRUCTION_NAME}> for ${INSTRUCTION_NAME} where AI: AccountInfo{\n        type FromAccountsData = ();\n        type ValidateData = ();\n        type InstructionData = ();\n\n        fn data_to_instruction_arg(_data: <${INSTRUCTION_NAME} as Instruction<AI>>::Data) -> CruiserResult<(Self::FromAccountsData, Self::ValidateData, Self::InstructionData)> {\n            todo!()\n        }\n\n        fn process(_program_id: &Pubkey, _data: Self::InstructionData, _accounts: &mut <${INSTRUCTION_NAME} as Instruction<AI>>::Accounts) -> CruiserResult<<${INSTRUCTION_NAME} as Instruction<AI>>::ReturnType> {\n            todo!()\n        }\n    }\n}\n\n#[cfg(feature = "cpi")]\npub use cpi::*;\n/// CPI for [`${INSTRUCTION_NAME}`]\n#[cfg(feature = "cpi")]\nmod cpi {\n    use super::*;\n    \n    #[derive(Debug)]\n    pub struct ${INSTRUCTION_NAME}CPI<\'a, AI, const N: usize> {\n        accounts: [MaybeOwned<\'a, AI>; N],\n        data: Vec<u8>,\n    }\n}\n\n#[cfg(feature = "client")]\npub use client::*;\n/// Client for [`${INSTRUCTION_NAME}`]\n#[cfg(feature = "client")]\nmod client {\n    use super::*;\n}\n')))}d.isMDXComponent=!0}}]);