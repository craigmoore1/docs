"use strict";(self.webpackChunkidentity_docs=self.webpackChunkidentity_docs||[]).push([[3887],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return d}});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var u=a.createContext({}),c=function(n){var e=a.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},l=function(n){var e=c(n.components);return a.createElement(u.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,u=n.parentName,l=s(n,["components","mdxType","originalType","parentName"]),p=c(t),d=r,g=p["".concat(u,".").concat(d)]||p[d]||m[d]||i;return t?a.createElement(g,o(o({ref:e},l),{},{components:t})):a.createElement(g,o({ref:e},l))}));function d(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=n,s.mdxType="string"==typeof n?n:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4548:function(n,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var a=t(3117),r=t(102),i=(t(7294),t(3905)),o=["components"],s={sidebar_position:3},u="Join Game",c={unversionedId:"cruiser/walkthrough/instructions/Join Game",id:"cruiser/walkthrough/instructions/Join Game",title:"Join Game",description:"Our next instruction will be join_game. This is a simpler instruction than the previous one because it doesn't initialize an account, just edit one and do a transfer.",source:"@site/docs/cruiser/walkthrough/instructions/Join Game.md",sourceDirName:"cruiser/walkthrough/instructions",slug:"/cruiser/walkthrough/instructions/Join Game",permalink:"/docs/cruiser/walkthrough/instructions/Join Game",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cruiser/walkthrough/instructions/Join Game.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Create Game",permalink:"/docs/cruiser/walkthrough/instructions/Create Game"},next:{title:"Forfeit Game",permalink:"/docs/cruiser/walkthrough/instructions/forfeit_game"}},l={},m=[{value:"Definition",id:"definition",level:2},{value:"Processor",id:"processor",level:2},{value:"Add to <code>InstructionList</code>",id:"add-to-instructionlist",level:2},{value:"CPI",id:"cpi",level:2},{value:"Client",id:"client",level:2},{value:"Tests",id:"tests",level:2}],p={toc:m};function d(n){var e=n.components,t=(0,r.Z)(n,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"join-game"},"Join Game"),(0,i.kt)("p",null,"Our next instruction will be ",(0,i.kt)("inlineCode",{parentName:"p"},"join_game"),". This is a simpler instruction than the previous one because it doesn't initialize an account, just edit one and do a transfer."),(0,i.kt)("p",null,"This instruction will be light on explanations and definitions. This should serve as a checkpoint to your understanding as most of what is happening should seem familiar."),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use crate::pda::GameSignerSeeder;\nuse crate::{Game, PlayerProfile, TutorialAccounts};\nuse cruiser::prelude::*;\n\n/// Joins an already created game.\n#[derive(Debug)]\npub enum JoinGame {}\n\nimpl<AI> Instruction<AI> for JoinGame {\n    type Accounts = JoinGameAccounts<AI>;\n    type Data = JoinGameData;\n    type ReturnType = ();\n}\n\n/// Accounts for [`JoinGame`]\n#[derive(AccountArgument, Debug)]\n#[account_argument(account_info = AI, generics = [where AI: AccountInfo])]\n#[validate(generics = [<'a> where AI: ToSolanaAccountInfo<'a>])]\npub struct JoinGameAccounts<AI> {\n    /// The authority of the joiner\n    #[validate(signer)]\n    pub authority: AI,\n    /// The profile of the joiner\n    #[validate(custom = &self.player_profile.authority == self.authority.key())]\n    pub player_profile: ReadOnlyDataAccount<AI, TutorialAccounts, PlayerProfile>,\n    /// The game to join\n    #[validate(\n        writable,\n        custom = !self.game.is_started(),\n        custom = self.game.is_valid_other_player(self.player_profile.info().key()),\n    )]\n    pub game: Box<DataAccount<AI, TutorialAccounts, Game>>,\n    /// The signer of the game\n    #[validate(writable, data = (GameSignerSeeder{ game: *self.game.info().key() }, self.game.signer_bump))]\n    pub game_signer: Seeds<AI, GameSignerSeeder>,\n    /// The funder for the wager\n    #[validate(signer, writable)]\n    pub wager_funder: AI,\n    /// The system program\n    pub system_program: SystemProgram<AI>,\n}\n\n/// Data for [`JoinGame`]\n#[derive(Clone, Debug, BorshSerialize, BorshDeserialize)]\npub struct JoinGameData {}\n")),(0,i.kt)("p",null,"This should all be familiar at this point except for ",(0,i.kt)("inlineCode",{parentName:"p"},"DataAccount")," which is just a version of ",(0,i.kt)("inlineCode",{parentName:"p"},"ReadOnlyDataAccount")," that writes data changes back to the chain."),(0,i.kt)("h2",{id:"processor"},"Processor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(feature = \"processor\")]\nmod processor {\n    use super::*;\n    use crate::accounts::Player;\n    use cruiser::solana_program::clock::Clock;\n    use std::iter::empty;\n\n    impl<'a, AI> InstructionProcessor<AI, JoinGame> for JoinGame\n    where\n        AI: ToSolanaAccountInfo<'a>,\n    {\n        type FromAccountsData = ();\n        type ValidateData = ();\n        type InstructionData = ();\n\n        fn data_to_instruction_arg(\n            _data: <JoinGame as Instruction<AI>>::Data,\n        ) -> CruiserResult<(\n            Self::FromAccountsData,\n            Self::ValidateData,\n            Self::InstructionData,\n        )> {\n            Ok(((), (), ()))\n        }\n\n        fn process(\n            _program_id: &Pubkey,\n            _data: Self::InstructionData,\n            accounts: &mut <JoinGame as Instruction<AI>>::Accounts,\n        ) -> CruiserResult<<JoinGame as Instruction<AI>>::ReturnType> {\n            // Set the other player\n            *match accounts.game.creator {\n                Player::One => &mut accounts.game.player2,\n                Player::Two => &mut accounts.game.player1,\n            } = *accounts.player_profile.info().key();\n\n            // Start the game by setting the timestamp\n            accounts.game.last_turn = Clock::get()?.unix_timestamp;\n\n            // Transfer the wager to the game\n            accounts.system_program.transfer(\n                CPIChecked,\n                &accounts.wager_funder,\n                accounts.game_signer.info(),\n                accounts.game.wager,\n                empty(),\n            )?;\n\n            Ok(())\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"add-to-instructionlist"},"Add to ",(0,i.kt)("inlineCode",{parentName:"h2"},"InstructionList")),(0,i.kt)("p",null,"Add the following to ",(0,i.kt)("inlineCode",{parentName:"p"},"src/lib.rs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, InstructionList, Copy, Clone)]\n#[instruction_list(\n    account_list = TutorialAccounts,\n    account_info = [<'a, AI> AI where AI: ToSolanaAccountInfo<'a>],\n    discriminant_type = u8,\n)]\npub enum TutorialInstructions {\n    /// Creates a new player profile.\n    #[instruction(instruction_type = instructions::CreateProfile)]\n    CreateProfile,\n    /// Create a new game.\n    #[instruction(instruction_type = instructions::CreateGame)]\n    CreateGame,\n    /// Join a game.\n    #[instruction(instruction_type = instructions::JoinGame)]\n    JoinGame,\n}\n")),(0,i.kt)("h2",{id:"cpi"},"CPI"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(feature = \"cpi\")]\npub use cpi::*;\n\n/// CPI for [`JoinGame`]\n#[cfg(feature = \"cpi\")]\nmod cpi {\n    use super::*;\n    use crate::TutorialInstructions;\n\n    /// CPI for [`JoinGame`]\n    #[derive(Debug)]\n    pub struct JoinGameCPI<'a, AI> {\n        accounts: [MaybeOwned<'a, AI>; 6],\n        data: Vec<u8>,\n    }\n    impl<'a, AI> JoinGameCPI<'a, AI> {\n        /// Joins a game\n        pub fn new(\n            authority: impl Into<MaybeOwned<'a, AI>>,\n            player_profile: impl Into<MaybeOwned<'a, AI>>,\n            game: impl Into<MaybeOwned<'a, AI>>,\n            game_signer: impl Into<MaybeOwned<'a, AI>>,\n            wager_funder: impl Into<MaybeOwned<'a, AI>>,\n            system_program: impl Into<MaybeOwned<'a, AI>>,\n        ) -> CruiserResult<Self> {\n            let mut data = Vec::new();\n            <TutorialInstructions as InstructionListItem<JoinGame>>::discriminant_compressed()\n                .serialize(&mut data)?;\n            JoinGameData {}.serialize(&mut data)?;\n            Ok(Self {\n                accounts: [\n                    authority.into(),\n                    player_profile.into(),\n                    game.into(),\n                    game_signer.into(),\n                    wager_funder.into(),\n                    system_program.into(),\n                ],\n                data,\n            })\n        }\n    }\n\n    impl<'a, AI> CPIClientStatic<'a, 7> for JoinGameCPI<'a, AI>\n    where\n        AI: ToSolanaAccountMeta,\n    {\n        type InstructionList = TutorialInstructions;\n        type Instruction = JoinGame;\n        type AccountInfo = AI;\n\n        fn instruction(\n            self,\n            program_account: impl Into<MaybeOwned<'a, Self::AccountInfo>>,\n        ) -> InstructionAndAccounts<[MaybeOwned<'a, Self::AccountInfo>; 7]> {\n            let program_account = program_account.into();\n            let instruction = SolanaInstruction {\n                program_id: *program_account.meta_key(),\n                accounts: self\n                    .accounts\n                    .iter()\n                    .map(MaybeOwned::as_ref)\n                    .map(AI::to_solana_account_meta)\n                    .collect(),\n                data: self.data,\n            };\n            let mut accounts = self.accounts.into_iter();\n            InstructionAndAccounts {\n                instruction,\n                accounts: [\n                    accounts.next().unwrap(),\n                    accounts.next().unwrap(),\n                    accounts.next().unwrap(),\n                    accounts.next().unwrap(),\n                    accounts.next().unwrap(),\n                    accounts.next().unwrap(),\n                    program_account,\n                ],\n            }\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"client"},"Client"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(feature = \"client\")]\npub use client::*;\n\n/// Client for [`JoinGame`]\n#[cfg(feature = \"client\")]\nmod client {\n    use super::*;\n\n    /// Joins a game.\n    pub fn join_game<'a>(\n        program_id: Pubkey,\n        authority: impl Into<HashedSigner<'a>>,\n        player_profile: Pubkey,\n        game: Pubkey,\n        game_signer_bump: u8,\n        wager_funder: impl Into<HashedSigner<'a>>,\n    ) -> InstructionSet<'a> {\n        let authority = authority.into();\n        let wager_funder = wager_funder.into();\n        InstructionSet {\n            instructions: vec![\n                JoinGameCPI::new(\n                    SolanaAccountMeta::new_readonly(authority.pubkey(), true),\n                    SolanaAccountMeta::new_readonly(player_profile, false),\n                    SolanaAccountMeta::new(game, false),\n                    SolanaAccountMeta::new(\n                        GameSignerSeeder { game }\n                            .create_address(&program_id, game_signer_bump)\n                            .unwrap(),\n                        false,\n                    ),\n                    SolanaAccountMeta::new(wager_funder.pubkey(), true),\n                    SolanaAccountMeta::new_readonly(SystemProgram::<()>::KEY, false),\n                )\n                .unwrap()\n                .instruction(SolanaAccountMeta::new_readonly(program_id, false))\n                .instruction,\n            ],\n            signers: [authority, wager_funder].into_iter().collect(),\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"tests"},"Tests"),(0,i.kt)("p",null,"Add the following to your ",(0,i.kt)("inlineCode",{parentName:"p"},"tests/instructions/mod.rs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"mod join_game;\n")),(0,i.kt)("p",null,"Then we create ",(0,i.kt)("inlineCode",{parentName:"p"},"tests/instructions/join_game.rs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use crate::instructions::setup_validator;\nuse cruiser::prelude::*;\nuse cruiser_tutorial::accounts::{Game, Player};\nuse cruiser_tutorial::instructions::{\n    create_game, create_profile, join_game, CreateGameClientData,\n};\nuse cruiser_tutorial::pda::GameSignerSeeder;\nuse cruiser_tutorial::TutorialAccounts;\nuse std::error::Error;\nuse std::time::Duration;\n\n#[tokio::test]\nasync fn join_game_test() -> Result<(), Box<dyn Error>> {\n    let guard = setup_validator().await;\n\n    let rpc = guard.rpc();\n    let funder = Keypair::new();\n\n    // Airdrop SOL to the funder\n    let blockhash = rpc.get_latest_blockhash().await?;\n    let sig = rpc\n        .request_airdrop_with_blockhash(&funder.pubkey(), LAMPORTS_PER_SOL * 10, &blockhash)\n        .await?;\n    rpc.confirm_transaction_with_spinner(&sig, &blockhash, CommitmentConfig::confirmed())\n        .await?;\n\n    // Create random authority and profile\n    let authority1 = Keypair::new();\n    let profile1 = Keypair::new();\n    let authority2 = Keypair::new();\n    let profile2 = Keypair::new();\n    let game = Keypair::new();\n\n    let (sig, result) = TransactionBuilder::new(&funder)\n        .signed_instructions(create_profile(\n            guard.program_id(),\n            &authority1,\n            &profile1,\n            &funder,\n        ))\n        .signed_instructions(create_profile(\n            guard.program_id(),\n            &authority2,\n            &profile2,\n            &funder,\n        ))\n        .signed_instructions(create_game(\n            guard.program_id(),\n            &authority1,\n            profile1.pubkey(),\n            &game,\n            &funder,\n            &funder,\n            Some(profile2.pubkey()),\n            CreateGameClientData {\n                creator_player: Player::One,\n                wager: LAMPORTS_PER_SOL,\n                turn_length: 60 * 60 * 24, // 1 day\n            },\n        ))\n        .signed_instructions(join_game(\n            guard.program_id(),\n            &authority2,\n            profile2.pubkey(),\n            game.pubkey(),\n            GameSignerSeeder {\n                game: game.pubkey(),\n            }\n            .find_address(&guard.program_id())\n            .1,\n            &funder,\n        ))\n        .send_and_confirm_transaction(\n            rpc,\n            RpcSendTransactionConfig {\n                skip_preflight: false,\n                preflight_commitment: Some(CommitmentLevel::Confirmed),\n                encoding: None,\n                max_retries: None,\n            },\n            CommitmentConfig::confirmed(),\n            Duration::from_millis(500),\n        )\n        .await?;\n\n    // Check result\n    match result {\n        ConfirmationResult::Success => {}\n        ConfirmationResult::Failure(error) => return Err(error.into()),\n        ConfirmationResult::Dropped => return Err("Transaction dropped".into()),\n    }\n\n    // Print logs for debugging\n    println!(\n        "Logs: {:#?}",\n        rpc.get_transaction_with_config(\n            &sig,\n            RpcTransactionConfig {\n                encoding: None,\n                commitment: Some(CommitmentConfig::confirmed()),\n                max_supported_transaction_version: None\n            }\n        )\n        .await?\n        .transaction\n        .meta\n        .unwrap()\n        .log_messages\n    );\n\n    // Check account data is what we expect\n    let account = rpc\n        .get_account_with_commitment(&game.pubkey(), CommitmentConfig::confirmed())\n        .await?\n        .value\n        .unwrap_or_else(|| {\n            panic!("Account not found");\n        });\n    let mut data = account.data.as_slice();\n    let discriminant =\n        <TutorialAccounts as AccountList>::DiscriminantCompressed::deserialize(&mut data)?;\n    assert_eq!(\n        discriminant,\n        <TutorialAccounts as AccountListItem<Game>>::compressed_discriminant()\n    );\n    let game: Game = Game::deserialize(&mut data)?;\n    assert!(game.last_turn > 0);\n    let mut expected = Game::new(\n        &profile1.pubkey(),\n        Player::One,\n        game.signer_bump,\n        LAMPORTS_PER_SOL,\n        60 * 60 * 24,\n    );\n    expected.player2 = profile2.pubkey();\n    expected.last_turn = game.last_turn;\n\n    assert_eq!(game, expected);\n\n    guard.drop_self().await;\n    Ok(())\n}\n')),(0,i.kt)("p",null,"This test should execute without error. To run it you can either run ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo test --features client")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo test --features client --test all_tests instructions::join_game::join_game_test -- --exact")," to run only this test."))}d.isMDXComponent=!0}}]);