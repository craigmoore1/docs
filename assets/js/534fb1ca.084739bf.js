"use strict";(self.webpackChunkidentity_docs=self.webpackChunkidentity_docs||[]).push([[5624],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4218:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return p}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),s=["components"],a={sidebar_position:2},l="Project Setup",u={unversionedId:"cruiser/walkthrough/Project Setup",id:"cruiser/walkthrough/Project Setup",title:"Project Setup",description:"Completed code for this can be found here.",source:"@site/docs/cruiser/walkthrough/Project Setup.md",sourceDirName:"cruiser/walkthrough",slug:"/cruiser/walkthrough/Project Setup",permalink:"/docs/cruiser/walkthrough/Project Setup",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cruiser/walkthrough/Project Setup.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Solana Basics",permalink:"/docs/cruiser/walkthrough/Solana Basics"},next:{title:"Accounts",permalink:"/docs/cruiser/walkthrough/Accounts"}},c={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Rust",id:"rust",level:3},{value:"Solana",id:"solana",level:3},{value:"Project Initialization",id:"project-initialization",level:2},{value:"<code>rust-toolchain.toml</code>",id:"rust-toolchaintoml",level:3},{value:"<code>Cargo.toml</code>",id:"cargotoml",level:3},{value:"Optional cruiser features",id:"optional-cruiser-features",level:4},{value:"<code>src/lib.rs</code>",id:"srclibrs",level:3},{value:"Suggested Lints",id:"suggested-lints",level:2},{value:"Next Steps",id:"next-steps",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"project-setup"},"Project Setup"),(0,o.kt)("p",null,"Completed code for this can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/identity-com/cruiser_tutorial"},"here"),"."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"First we need to ensure we have the needed prerequisites installed."),(0,o.kt)("h3",{id:"rust"},"Rust"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"Install Rust"),"."),(0,o.kt)("h3",{id:"solana"},"Solana"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.solana.com/cli/install-solana-cli-tools"},"Install Solana"),". Cruiser currently only supports rust ",(0,o.kt)("inlineCode",{parentName:"p"},"1.59")," which exists on solana versions ",(0,o.kt)("inlineCode",{parentName:"p"},">=1.9.17"),"."),(0,o.kt)("h2",{id:"project-initialization"},"Project Initialization"),(0,o.kt)("p",null,"Now we'll set up our first cruiser project. We'll start by running ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo init cruiser_tutorial --lib")," to create and init a new folder for our project.\nThis comes with a few default files, some of which we'll overwrite. Eventually our project structure will look like this. The ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," marks files that we end up with after this step."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cruiser_tutorial\n*|- src\n | |- accounts           // Accounts used by your program and their impls\n | | |- mod.rs\n | | |- account1.rs\n | | |- account2.rs\n | | |- ...\n | |- arguments          // `AccountArgument`s used by your program\n | | |- mod.rs\n | | |- argument1.rs\n | | |- argument2.rs\n | | |- ...\n | |- instructions       // `Instruction`s used by your program\n | | |- mod.rs\n | | |- instruction1.rs\n | | |- instruction2.rs\n | | |- ...\n*| |- lib.rs             // Your program's main file\n | |- pda.rs             // Your program's PDAs\n |- tests\n | |- all_tests.rs       // Tests for your program\n | |- instructions\n | | |- mod.rs\n | | |- test_instruction1.rs\n | | |- test_instruction2.rs\n | | |- ...\n*|- Cargo.toml\n*|- Cargo.lock\n*|- rust-toolchain.toml\n")),(0,o.kt)("h3",{id:"rust-toolchaintoml"},(0,o.kt)("inlineCode",{parentName:"h3"},"rust-toolchain.toml")),(0,o.kt)("p",null,"We need to add ",(0,o.kt)("inlineCode",{parentName:"p"},"rust-toolchain.toml"),", as it will keep Rust relatively in-line with the current solana version."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[toolchain]\nchannel = "nightly-2022-03-22"\ncomponents = ["rustfmt", "clippy"]\nprofile = "minimal"\n')),(0,o.kt)("h3",{id:"cargotoml"},(0,o.kt)("inlineCode",{parentName:"h3"},"Cargo.toml")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file will add features and the ",(0,o.kt)("inlineCode",{parentName:"p"},"cruiser")," dependency."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "cruiser_tutorial"\nversion = "0.0.0"\nedition = "2021"\n\n# This makes solana realize this is a program\n[lib]\ncrate-type = ["cdylib", "lib"]\n\n[features]\n# The default is building the program for deployment, you can change this if you want\ndefault = ["entrypoint"]\n# This gates the entrypoint macro\nentrypoint = ["processor"]\n# This gates the processor functions on the program\nprocessor = []\n# This gates CPI helper functions\ncpi = []\n# This gates client functions\nclient = ["cruiser/client", "cpi"]\n\n[dependencies]\n# This tutorial targets the unrealeased version 0.3.0 of cruiser. This will eventually be released.\ncruiser = { git = "https://github.com/identity-com/cruiser.git", branch = "release/0.3.0" }\n\n[dev-dependencies]\ncruiser = { git = "https://github.com/identity-com/cruiser.git", branch = "release/0.3.0", features = ["client"] }\nreqwest = "0.11.10"\nfutures = "0.3.21"\ntokio = { version = "1.17.0", features = ["full"] }\n')),(0,o.kt)("h4",{id:"optional-cruiser-features"},"Optional cruiser features"),(0,o.kt)("p",null,"These features can be added if you need further functionality."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"spl-token"),": Enables spl token support"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"small_vec"),": Adds small vectors (smaller than 32 bit length)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"in_place"),": ",(0,o.kt)("inlineCode",{parentName:"li"},">=0.3.0"),", Adds support for in-place data")),(0,o.kt)("h3",{id:"srclibrs"},(0,o.kt)("inlineCode",{parentName:"h3"},"src/lib.rs")),(0,o.kt)("p",null,"Our initial file. This is the barest definition of a cruiser program, no instructions or accounts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"// Modules will be added here when we add those files\n\nuse cruiser::prelude::*;\n\n// This uses your instruction list as the entrypoint to the program. \n#[cfg(feature = \"entrypoint\")]\nentrypoint_list!(TutorialInstructions, TutorialInstructions);\n\n/// This is the list of instructions for your program, we will add more later.\n/// \n/// The [`InstructionList`] trait defines a list of program instructions. \n/// It takes an additional attribute to define which list of accounts \n/// corresponds to this list and what type of account info it will use. \n/// In this case we use a generic account info to support many cases. \n/// This derive also implements [`InstructionListItem`] for each item \n/// in the list and [`InstructionListProcessor`]. \n/// All these traits can be manually implemented if you need custom logic.\n#[derive(Debug, InstructionList, Copy, Clone)] \n#[instruction_list(\n    account_list = TutorialAccounts,\n    account_info = [<'a, AI> AI where AI: ToSolanaAccountInfo<'a>],\n    // This sets the discriminant for the instruction list. By default it is `u64`.\n    discriminant_type = u8,\n)]\npub enum TutorialInstructions {}\n\n/// This is the list of accounts used by your program, we will add them later.\n///\n/// The [`AccountList`] trait defines a list of accounts for use by a program. \n/// It is used to make sure no two accounts have the same discriminants.\n/// This derive also implements [`AccountListItem`]. \n/// Both these traits can be manually implemented if you need custom logic.\n#[derive(Debug, AccountList)]\npub enum TutorialAccounts {}\n")),(0,o.kt)("h2",{id:"suggested-lints"},"Suggested Lints"),(0,o.kt)("p",null,"These are lints that are suggested to be added at the top of ",(0,o.kt)("inlineCode",{parentName:"p"},"src/lib.rs"),". They are not required, but help make readable and better code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#![warn(\n    unused_import_braces,           // This will be caught by rustfmt as well\n\n    missing_docs,                   // Ensures all public items are documented\n\n    missing_debug_implementations,  // Makes sure all public items have a debug implementation\n\n    unused_qualifications,          // This cleans up your code when there are unnecessary qualifiers\n\n    clippy::pedantic                // This can be aggressive but catches a lot of common mistakes. \n                                    // A bunch don't matter or aren't applicable so can be disabled \n                                    // either on a case-by-case basis or by disabling the lint with \n                                    // an allow\n)]\n")),(0,o.kt)("h2",{id:"next-steps"},"Next Steps"),(0,o.kt)("p",null,"Next up we'll set up an account for the program to use."))}m.isMDXComponent=!0}}]);